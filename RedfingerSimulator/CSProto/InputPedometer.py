# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CSProto

import flatbuffers

class InputPedometer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsInputPedometer(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InputPedometer()
        x.Init(buf, n + offset)
        return x

    # InputPedometer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InputPedometer
    def Startdate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # InputPedometer
    def Enddate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # InputPedometer
    def Steps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputPedometer
    def Distance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputPedometer
    def Averageactivepace(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputPedometer
    def Currentpace(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputPedometer
    def Currentcadence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputPedometer
    def Floorsasc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputPedometer
    def Floorsdes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def InputPedometerStart(builder): builder.StartObject(9)
def InputPedometerAddStartdate(builder, startdate): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(startdate), 0)
def InputPedometerAddEnddate(builder, enddate): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(enddate), 0)
def InputPedometerAddSteps(builder, steps): builder.PrependFloat32Slot(2, steps, 0.0)
def InputPedometerAddDistance(builder, distance): builder.PrependFloat32Slot(3, distance, 0.0)
def InputPedometerAddAverageactivepace(builder, averageactivepace): builder.PrependFloat32Slot(4, averageactivepace, 0.0)
def InputPedometerAddCurrentpace(builder, currentpace): builder.PrependFloat32Slot(5, currentpace, 0.0)
def InputPedometerAddCurrentcadence(builder, currentcadence): builder.PrependFloat32Slot(6, currentcadence, 0.0)
def InputPedometerAddFloorsasc(builder, floorsasc): builder.PrependFloat32Slot(7, floorsasc, 0.0)
def InputPedometerAddFloorsdes(builder, floorsdes): builder.PrependFloat32Slot(8, floorsdes, 0.0)
def InputPedometerEnd(builder): return builder.EndObject()
