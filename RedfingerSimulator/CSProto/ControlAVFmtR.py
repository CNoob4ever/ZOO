# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CSProto

import flatbuffers

class ControlAVFmtR(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsControlAVFmtR(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ControlAVFmtR()
        x.Init(buf, n + offset)
        return x

    # ControlAVFmtR
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ControlAVFmtR
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ControlAVFmtR
    def Msg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # ControlAVFmtR
    def Afmt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ControlAVFmtR
    def Aprofile(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ControlAVFmtR
    def Achannel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 2

    # ControlAVFmtR
    def Asmprate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 44100

    # ControlAVFmtR
    def Abitrate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 131072

    # ControlAVFmtR
    def Vfmt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ControlAVFmtR
    def Vprofile(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ControlAVFmtR
    def Vwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 1024

    # ControlAVFmtR
    def Vheight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 576

    # ControlAVFmtR
    def Vfps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 30

    # ControlAVFmtR
    def Vbitrate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 5242880

def ControlAVFmtRStart(builder): builder.StartObject(13)
def ControlAVFmtRAddCode(builder, code): builder.PrependInt32Slot(0, code, 0)
def ControlAVFmtRAddMsg(builder, msg): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(msg), 0)
def ControlAVFmtRAddAfmt(builder, afmt): builder.PrependUint8Slot(2, afmt, 0)
def ControlAVFmtRAddAprofile(builder, aprofile): builder.PrependUint8Slot(3, aprofile, 0)
def ControlAVFmtRAddAchannel(builder, achannel): builder.PrependUint8Slot(4, achannel, 2)
def ControlAVFmtRAddAsmprate(builder, asmprate): builder.PrependUint32Slot(5, asmprate, 44100)
def ControlAVFmtRAddAbitrate(builder, abitrate): builder.PrependUint32Slot(6, abitrate, 131072)
def ControlAVFmtRAddVfmt(builder, vfmt): builder.PrependUint8Slot(7, vfmt, 0)
def ControlAVFmtRAddVprofile(builder, vprofile): builder.PrependUint8Slot(8, vprofile, 0)
def ControlAVFmtRAddVwidth(builder, vwidth): builder.PrependUint16Slot(9, vwidth, 1024)
def ControlAVFmtRAddVheight(builder, vheight): builder.PrependUint16Slot(10, vheight, 576)
def ControlAVFmtRAddVfps(builder, vfps): builder.PrependUint16Slot(11, vfps, 30)
def ControlAVFmtRAddVbitrate(builder, vbitrate): builder.PrependUint32Slot(12, vbitrate, 5242880)
def ControlAVFmtREnd(builder): return builder.EndObject()
