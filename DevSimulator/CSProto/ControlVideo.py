# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CSProto

import flatbuffers

class ControlVideo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsControlVideo(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ControlVideo()
        x.Init(buf, n + offset)
        return x

    # ControlVideo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ControlVideo
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ControlVideo
    def Bitrate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 5242880

    # ControlVideo
    def Fps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 30

    # ControlVideo
    def Maxiframe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 100

def ControlVideoStart(builder): builder.StartObject(4)
def ControlVideoAddMode(builder, mode): builder.PrependUint8Slot(0, mode, 0)
def ControlVideoAddBitrate(builder, bitrate): builder.PrependUint32Slot(1, bitrate, 5242880)
def ControlVideoAddFps(builder, fps): builder.PrependUint32Slot(2, fps, 30)
def ControlVideoAddMaxiframe(builder, maxiframe): builder.PrependUint32Slot(3, maxiframe, 100)
def ControlVideoEnd(builder): return builder.EndObject()
