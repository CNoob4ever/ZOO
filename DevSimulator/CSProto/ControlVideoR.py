# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CSProto

import flatbuffers

class ControlVideoR(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsControlVideoR(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ControlVideoR()
        x.Init(buf, n + offset)
        return x

    # ControlVideoR
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ControlVideoR
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ControlVideoR
    def Msg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # ControlVideoR
    def Profile(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ControlVideoR
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 1024

    # ControlVideoR
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 576

    # ControlVideoR
    def Fps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 30

    # ControlVideoR
    def Bitrate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 5242880

    # ControlVideoR
    def Bitmode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def ControlVideoRStart(builder): builder.StartObject(8)
def ControlVideoRAddCode(builder, code): builder.PrependInt32Slot(0, code, 0)
def ControlVideoRAddMsg(builder, msg): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(msg), 0)
def ControlVideoRAddProfile(builder, profile): builder.PrependUint8Slot(2, profile, 0)
def ControlVideoRAddWidth(builder, width): builder.PrependUint16Slot(3, width, 1024)
def ControlVideoRAddHeight(builder, height): builder.PrependUint16Slot(4, height, 576)
def ControlVideoRAddFps(builder, fps): builder.PrependUint16Slot(5, fps, 30)
def ControlVideoRAddBitrate(builder, bitrate): builder.PrependUint32Slot(6, bitrate, 5242880)
def ControlVideoRAddBitmode(builder, bitmode): builder.PrependUint8Slot(7, bitmode, 0)
def ControlVideoREnd(builder): return builder.EndObject()
