# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CSProto

import flatbuffers

class ControlAVFmt(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsControlAVFmt(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ControlAVFmt()
        x.Init(buf, n + offset)
        return x

    # ControlAVFmt
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ControlAVFmt
    def Afmt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ControlAVFmt
    def Aprofile(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ControlAVFmt
    def Achannel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 2

    # ControlAVFmt
    def Asmprate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 44100

    # ControlAVFmt
    def Abitrate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 131072

    # ControlAVFmt
    def Vfmt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ControlAVFmt
    def Vprofile(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ControlAVFmt
    def Vwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 1024

    # ControlAVFmt
    def Vheight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 576

    # ControlAVFmt
    def Vfps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 30

    # ControlAVFmt
    def Vbitrate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 5242880

def ControlAVFmtStart(builder): builder.StartObject(11)
def ControlAVFmtAddAfmt(builder, afmt): builder.PrependUint8Slot(0, afmt, 0)
def ControlAVFmtAddAprofile(builder, aprofile): builder.PrependUint8Slot(1, aprofile, 0)
def ControlAVFmtAddAchannel(builder, achannel): builder.PrependUint8Slot(2, achannel, 2)
def ControlAVFmtAddAsmprate(builder, asmprate): builder.PrependUint16Slot(3, asmprate, 44100)
def ControlAVFmtAddAbitrate(builder, abitrate): builder.PrependUint32Slot(4, abitrate, 131072)
def ControlAVFmtAddVfmt(builder, vfmt): builder.PrependUint8Slot(5, vfmt, 0)
def ControlAVFmtAddVprofile(builder, vprofile): builder.PrependUint8Slot(6, vprofile, 0)
def ControlAVFmtAddVwidth(builder, vwidth): builder.PrependUint16Slot(7, vwidth, 1024)
def ControlAVFmtAddVheight(builder, vheight): builder.PrependUint16Slot(8, vheight, 576)
def ControlAVFmtAddVfps(builder, vfps): builder.PrependUint16Slot(9, vfps, 30)
def ControlAVFmtAddVbitrate(builder, vbitrate): builder.PrependUint32Slot(10, vbitrate, 5242880)
def ControlAVFmtEnd(builder): return builder.EndObject()
