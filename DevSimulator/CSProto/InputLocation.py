# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CSProto

import flatbuffers

class InputLocation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsInputLocation(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InputLocation()
        x.Init(buf, n + offset)
        return x

    # InputLocation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InputLocation
    def Longitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputLocation
    def Latitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputLocation
    def Altitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputLocation
    def Floor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputLocation
    def Horizontalaccuracy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputLocation
    def Verticalaccuracy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputLocation
    def Speed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputLocation
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InputLocation
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def InputLocationStart(builder): builder.StartObject(9)
def InputLocationAddLongitude(builder, longitude): builder.PrependFloat32Slot(0, longitude, 0.0)
def InputLocationAddLatitude(builder, latitude): builder.PrependFloat32Slot(1, latitude, 0.0)
def InputLocationAddAltitude(builder, altitude): builder.PrependFloat32Slot(2, altitude, 0.0)
def InputLocationAddFloor(builder, floor): builder.PrependFloat32Slot(3, floor, 0.0)
def InputLocationAddHorizontalaccuracy(builder, horizontalaccuracy): builder.PrependFloat32Slot(4, horizontalaccuracy, 0.0)
def InputLocationAddVerticalaccuracy(builder, verticalaccuracy): builder.PrependFloat32Slot(5, verticalaccuracy, 0.0)
def InputLocationAddSpeed(builder, speed): builder.PrependFloat32Slot(6, speed, 0.0)
def InputLocationAddDirection(builder, direction): builder.PrependFloat32Slot(7, direction, 0.0)
def InputLocationAddTimestamp(builder, timestamp): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(timestamp), 0)
def InputLocationEnd(builder): return builder.EndObject()
